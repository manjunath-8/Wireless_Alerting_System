/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/c95b6322-0112-4f2f-9409-41089b72f775 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudSwitch mercedes_finance;
  CloudSwitch mercedes_maintain;
  CloudSwitch mercedes_me;
  CloudSwitch mercedes_production;
  CloudSwitch mercedes_quality;
  CloudSwitch mercedes_scmg;
  bool mer_trig;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <HTTPClient.h>

String Web_App_URL = "https://script.google.com/macros/s/AKfycbxaOGLY61j8GpqfNgKrRfJyQF2c1_hnQ22Q6VIzORbe0-CjTNuwo3f7L1akeMKr9vho/exec";

int mmbp = LOW;
int msbp = LOW;
int mqbp = LOW;
int mpbp = LOW;
int mfbp = LOW;
int mmebp = LOW;


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  pinMode(12, INPUT); // jaguar_maintain
  pinMode(13, INPUT); // jaguar_scmg
  pinMode(14, INPUT); // jaguar_quality
  pinMode(26, INPUT); // jaguar_production
  pinMode(27, INPUT); // jaguar_me
  pinMode(33, INPUT); // jaguar_finance
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  maintainn();
  scmg();
  quality();
  production();
  me();
  finance();
}

void maintainn()
{
  int mmb = digitalRead(12); // Read the state of the button connected to pin 12
  
  mercedes_maintain = (mmb == HIGH) ? false : true; // Set the mercedes_Maintain 
  
  if (mmb != mmbp) {
    String status = (mmb == HIGH) ? "Mercedes_Maintenance_Error_Occured" : "Mercedes_Maintenance_Error_Resolved";
    googlesheets(status);
    mer_trig = (mmb == HIGH) ? true : false;
    mmbp = mmb;
  }
}

void scmg()
{
  int msb = digitalRead(13); // Read the state of the button connected to pin 13
  
  mercedes_scmg = (msb == HIGH) ? false : true; // Set the mercedes_scmg 
  
  if (msb != msbp) {
    String status = (msb == HIGH) ? "Mercedes_Supply_Error_Occured" : "Mercedes_Supply_Error_Resolved";
    googlesheets(status);
    mer_trig = (msb == HIGH) ? true : false;
    msbp = msb;
  }
}

void quality()
{
  int mqb = digitalRead(14); // Read the state of the button connected to pin 14
 
  mercedes_quality = (mqb == HIGH) ? false : true; // Set the mercedes_Quality 
  
  if (mqb != mqbp) {
    String status = (mqb == HIGH) ? "Mercedes_Quality_Error_Occured" : "Mercedes_Quality_Error_Resolved";
    googlesheets(status);
    mer_trig = (mqb == HIGH) ? true : false;
    mqbp = mqb;
  }
}

void production()
{
  int mpb = digitalRead(26); // Read the state of the button connected to pin 26
  
  mercedes_production = (mpb == HIGH) ? false : true; // Set the mercedes_production 
  
  if (mpb != mpbp) {
    String status = (mpb == HIGH) ? "Mercedes_Production_Error_Occured" : "Mercedes_Production_Error_Resolved";
    googlesheets(status);
    mer_trig = (mpb == HIGH) ? true : false;
    mpbp = mpb;
  }
}

void me()
{
  int mmeb = digitalRead(27); // Read the state of the button connected to pin 27
  
  mercedes_me = (mmeb == HIGH) ? false : true; // Set the mercedes_me
  
  if (mmeb != mmebp) {
    String status = (mmeb == HIGH) ? "Mercedes_Mechanical_Error_Occured" : "Mercedes_Mechanical_Error_Resolved";
    googlesheets(status);
    mer_trig = (mmeb == HIGH) ? true : false;
    mmebp = mmeb;
  }
}

void finance()
{
  int mfb = digitalRead(33); // Read the state of the button connected to pin 33
  
  mercedes_finance = (mfb == HIGH) ? false : true; // Set the mercedes_finance
  
  if (mfb != mfbp) {
    String status = (mfb == HIGH) ? "Mercedes_Finance_Error_Occured" : "Mercedes_Finance_Error_Resolved";
    googlesheets(status);
    mer_trig = (mfb == HIGH) ? true : false;
    mfbp = mfb;
  }
}

void googlesheets(String status) {
    String Send_Data_URL = Web_App_URL + "?sts=write&srs=" + status;
    
    HTTPClient http;
    http.begin(Send_Data_URL.c_str());
    http.setFollowRedirects(HTTPC_STRICT_FOLLOW_REDIRECTS);
    int httpCode = http.GET();

    if (httpCode > 0) {
      String payload = http.getString();
      Serial.println(httpCode);
      Serial.println(payload);
    } else {
      Serial.println("Error on HTTP request");
    }
    
    http.end();
}


/*
  Since MerTrig is READ_WRITE variable, onMerTrigChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMerTrigChange()  {
  // Add your code here to act upon MerTrig change
}





